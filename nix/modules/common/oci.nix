{
  lib,
  config,
  pkgs,
  ...
}:
{
  options = {
    oci = with lib; {
      enable = mkEnableOption "enables OCI containers";
      main-network = mkOption {
        type = types.bool;
        description = "enables creating `main` podman network";
        default = true;
      };
    };
  };

  config = lib.mkIf config.oci.enable {
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
      defaultNetwork.settings = {
        # Required for container networking to be able to use names.
        dns_enabled = true;
      };
    };
    virtualisation.oci-containers.backend = "podman";

    # Enable container name DNS for non-default Podman networks.
    # https://github.com/NixOS/nixpkgs/issues/226365
    networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

    systemd.timers.podman-auto-update.wantedBy = [ "multi-user.target" ];

    # `main` podman network
    systemd.services."podman-network-main" = lib.mkIf config.oci.main-network {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f main";
      };
      script = ''
        podman network inspect main || podman network create main
      '';
      partOf = [ "podman-compose-main-root.target" ];
      wantedBy = [ "podman-compose-main-root.target" ];
    };

    # `main` service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-main-root" = lib.mkIf config.oci.main-network {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
