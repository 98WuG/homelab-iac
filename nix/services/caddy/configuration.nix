{ lib, config, ... }:
{
  options = {
    caddy = with lib; {
      staging = mkOption {
        type = types.bool;
        description = "use staging cert issuer";
        default = false;
      };
    };
  };
  config = {
    systemd.tmpfiles.rules = [
      "d /persist/caddy 0700 root root -"
      "d /persist/caddy/config 0700 root root -"
      "d /persist/caddy/data 0700 root root -"
    ];

    # Containers
    virtualisation.oci-containers.containers."caddy" = {
      image = "registry.gitlab.com/geraldwuhoo/caddy-pq";
      volumes = [
        "${config.sops.templates.Caddyfile.path}:/etc/caddy/Caddyfile:ro"
        "/persist/caddy/config:/config:rw"
        "/persist/caddy/data:/data:rw"
      ];
      ports = [
        "80:80/tcp"
        "443:443/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=caddy"
        "--network=main"
      ];
    };
    systemd.services."podman-caddy" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      partOf = [ "podman-compose-caddy-root.target" ];
      wantedBy = [ "podman-compose-caddy-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-caddy-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
