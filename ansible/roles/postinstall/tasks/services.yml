
# vim: ts=2 sw=2 smartindent

- name: Label worker nodes
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Node
      metadata:
        name: "{{ item }}"
        labels:
          node-role.kubernetes.io/worker: worker
  loop: "{{ groups['worker'] }}"

- name: Add helm repos
  community.kubernetes.helm_repository:
    name: "{{ item.name }}"
    repo_url: "{{ item.url }}"
  loop:
    - name: kube-vip
      url: "https://kube-vip.io/helm-charts"
    - name: ingress-nginx
      url: "https://kubernetes.github.io/ingress-nginx"
    - name: cert-manager
      url: "https://charts.jetstack.io"
    - name: ceph-csi
      url: "https://ceph.github.io/csi-charts"

- name: Add kube-vip config
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kubevip
        namespace: kube-system
      data:
        range-global: 10.40.0.90-10.40.0.90

- name: Deploy kube-vip cloud controller
  community.kubernetes.helm:
    name: kube-vip-cloud-provider
    chart_ref: kube-vip/kube-vip-cloud-provider
    release_namespace: kube-system

- name: Deploy ingress-nginx
  community.kubernetes.helm:
    name: ingress-nginx
    chart_ref: ingress-nginx/ingress-nginx
    release_namespace: ingress-nginx
    create_namespace: true
    values:
      controller:
        setAsDefaultIngress: true
        ingressClassResource:
          default: true
        watchIngressWithoutClass: true
        extraArgs:
          default-ssl-certificate: "default/wildcard-wuhoo-xyz-tls{{ '' if letsencrypt_prod else '-staging' }}"

- name: Deploy cert-manager
  community.kubernetes.helm:
    name: cert-manager
    chart_ref: cert-manager/cert-manager
    release_namespace: cert-manager
    create_namespace: true
    values:
      installCRDs: true
      podDnsPolicy: "None"
      podDnsConfig:
        nameservers:
          - "1.1.1.1"
          - "9.9.9.9"

- name: Cloudflare API secret
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cloudflare-api-key-secret
        namespace: default
      type: Opaque
      stringData:
        api-key: "{{ cloudflare_api_key }}"

- name: Configure cert-manager
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'cert-manager/{{ item }}') | from_yaml }}"
  loop:
    - "cert-manager-issuer.j2"
    - "cert-manager-certificate.j2"

- name: Deploy ceph-csi-rbd
  community.kubernetes.helm:
    name: ceph-csi-rbd
    chart_ref: ceph-csi/ceph-csi-rbd
    release_namespace: ceph-csi-rbd
    create_namespace: true
    values:
      csiConfig:
        - clusterID: "{{ ceph_cluster_id }}"
          monitors: "{{ ceph_monitors }}"

- name: Ceph RBD secret
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}"
        namespace: default
      type: kubernetes.io/rbd
      stringData:
        userID: "{{ item.user_id }}"
        userKey: "{{ item.user_key }}"
  loop: "{{ ceph_rbd_users }}"

- name: Ceph RBD storageclass
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: ceph-rbd-sc
        annotations:
          storageclass.kubernetes.io/is-default-class: "true"
      provisioner: rbd.csi.ceph.com
      parameters:
        clusterID: "{{ ceph_cluster_id }}"
        pool: kube
        imageFeatures: layering
        csi.storage.k8s.io/provisioner-secret-name: ceph-admin
        csi.storage.k8s.io/provisioner-secret-namespace: default
        csi.storage.k8s.io/controller-expand-secret-name: ceph-admin
        csi.storage.k8s.io/controller-expand-secret-namespace: default
        csi.storage.k8s.io/node-stage-secret-name: ceph-admin
        csi.storage.k8s.io/node-stage-secret-namespace: default
      reclaimPolicy: Retain
      allowVolumeExpansion: true
      mountOptions:
        - discard

- name: Deploy ceph-csi-cephfs
  community.kubernetes.helm:
    name: ceph-csi-cephfs
    chart_ref: ceph-csi/ceph-csi-cephfs
    release_namespace: ceph-csi-cephfs
    create_namespace: true
    values:
      csiConfig:
        - clusterID: "{{ ceph_cluster_id }}"
          monitors: "{{ ceph_monitors }}"

- name: Ceph cephfs secret
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}"
        namespace: default
      type: Opaque
      stringData:
        adminID: "{{ item.admin_id }}"
        adminKey: "{{ item.admin_key }}"
  loop: "{{ ceph_cephfs_users }}"

- name: Ceph cephfs storageclass
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: ceph-cephfs-sc
      provisioner: cephfs.csi.ceph.com
      parameters:
        # (required) String representing a Ceph cluster to provision storage from.
        # Should be unique across all Ceph clusters in use for provisioning,
        # cannot be greater than 36 bytes in length, and should remain immutable for
        # the lifetime of the StorageClass in use.
        # Ensure to create an entry in the configmap named ceph-csi-config, based on
        # csi-config-map-sample.yaml, to accompany the string chosen to
        # represent the Ceph cluster in clusterID below
        clusterID: "{{ ceph_cluster_id }}"

        # (required) CephFS filesystem name into which the volume shall be created
        # eg: fsName: myfs
        fsName: cephfs

        # (optional) Ceph pool into which volume data shall be stored
        # pool: <cephfs-data-pool>

        # (optional) Comma separated string of Ceph-fuse mount options.
        # For eg:
        # fuseMountOptions: debug

        # (optional) Comma separated string of Cephfs kernel mount options.
        # Check man mount.ceph for mount options. For eg:
        # kernelMountOptions: readdir_max_bytes=1048576,norbytes

        # The secrets have to contain user and/or Ceph admin credentials.
        csi.storage.k8s.io/provisioner-secret-name: csi-cephfs-secret
        csi.storage.k8s.io/provisioner-secret-namespace: default
        csi.storage.k8s.io/controller-expand-secret-name: csi-cephfs-secret
        csi.storage.k8s.io/controller-expand-secret-namespace: default
        csi.storage.k8s.io/node-stage-secret-name: csi-cephfs-secret
        csi.storage.k8s.io/node-stage-secret-namespace: default

        # (optional) The driver can use either ceph-fuse (fuse) or
        # ceph kernelclient (kernel).
        # If omitted, default volume mounter will be used - this is
        # determined by probing for ceph-fuse and mount.ceph
        # mounter: kernel

        # (optional) Prefix to use for naming subvolumes.
        # If omitted, defaults to "csi-vol-".
        # volumeNamePrefix: "foo-bar-"

      reclaimPolicy: Retain
      allowVolumeExpansion: true
      mountOptions:
        - debug
